---
alwaysApply: false
---

# TODO: План реализации FastAPI микросервиса

После того как выполнил какие-то шаги, обнови статус в .cursor\rules\todo.mdc

## Основные требования

### 1. Health Check Endpoint
- [x] Создать endpoint `GET /health`
- [x] Реализовать проверку состояния сервиса
- [x] Добавить ответ со статусом, версией и временем работы
- [x] Настроить исключение из аутентификации для `/health`

### 2. Структурированное логирование
- [x] Настроить structlog для JSON-логов
- [x] Добавить метки `service` и `endpoint`
- [x] Настроить вывод в stdout
- [x] Реализовать уровни: INFO, WARNING, ERROR, DEBUG
- [x] Создать минимальную конфигурацию без внешних систем

### 3. Аутентификация запросов
- [x] Реализовать Bearer Token аутентификацию
- [x] Добавить валидацию токена в заголовке `Authorization`
- [x] Настроить защиту всех эндпоинтов кроме `/health`
- [x] Добавить поддержку токена `AUTH_TOKEN` из `.env`
- [x] Добавить поддержку токена `WEBHOOK_AUTH_TOKEN` из `.env` для webhook авторизации

### 4. Простая Webhook система
- [x] Добавить обязательный параметр `webhook_url` в запросы
- [x] Реализовать немедленный ответ `204 No Content` с `X-Operation-ID`
- [x] Настроить синхронную обработку задач
- [x] Реализовать отправку результата на `webhook_url`
- [x] Добавить аутентификацию webhook с токеном `WEBHOOK_AUTH_TOKEN`
- [x] Создать стандартизированную схему ответа с UUID операции

### 5. Идентификация и метаданные
- [x] Добавить настраиваемое поле `service_name` в env
- [x] Реализовать генерацию UUID для `operation_id`
- [x] Добавить поддержку версионирования API

### 6. Stateless архитектура
- [x] Обеспечить полностью stateless микросервис
- [x] Реализовать независимую обработку каждого запроса
- [x] Убрать любое состояние между запросами
- [x] Максимизировать простоту для начинающих разработчиков

### 7. Система алертов для ошибок
- [x] Настроить триггеры для HTTP ошибок 400/500
- [x] Добавить триггеры для исключений в обработчиках
- [x] Интегрировать Supabase Edge Function для уведомлений
- [x] Реализовать формат алерта с полями: text, priority, timestamp, tags, debug_logs
- [x] Настроить конфигурацию через переменные окружения
- [x] Добавить логирование всех алертов

### 8. Схемы для работы с внешними сервисами (Step)
- [x] Создать схемы с максимальной гибкостью параметров
- [x] Реализовать максимальное количество опциональных параметров в `StepCallInitial.input`
- [x] Добавить поддержку возврата `StepResult` (промежуточный)
- [x] Добавить поддержку возврата `FinalStepResult` (финальный)

### 9. Пример простого действия в шаблоне
- [x] Создать пример простой обработки текста
- [x] Реализовать FastAPI endpoint для демонстрации
- [x] Настроить синхронную обработку с отправкой webhook
- [x] Показать полный цикл работы микросервиса
- [x] Продемонстрировать максимальную гибкость параметров в `input`

## Техническая реализация

### Структура проекта
- [x] Создать папку `app/` с основными модулями
- [x] Создать `app/main.py` для FastAPI приложения
- [x] Создать `app/config.py` для конфигурации
- [x] Создать `app/auth.py` для аутентификации
- [x] Создать `app/logging_config.py` для настройки логирования
- [x] Создать папку `app/schemas/` с Pydantic схемами
- [x] Создать папку `app/api/` с API роутами
- [x] Создать папку `app/services/` с бизнес-логикой

### Схемы данных
- [x] Создать `app/schemas/health.py` для health check
- [x] Создать `app/schemas/operations.py` для операций
- [x] Создать `app/schemas/step_schemas.py` для Step схем
- [x] Реализовать валидацию с помощью Pydantic v2

### API Endpoints
- [x] Создать `app/api/health.py` для health endpoint
- [x] Создать `app/api/operations.py` для операций
- [x] Создать `app/api/example.py` для примера простого действия
- [x] Реализовать все необходимые endpoints согласно спецификации

### Сервисы
- [x] Создать `app/services/operation_service.py` для операций
- [x] Создать `app/services/webhook_service.py` для webhook
- [x] Создать `app/services/alert_service.py` для алертов
- [x] Реализовать бизнес-логику каждого сервиса

### Конфигурация
- [x] Создать `.env.example` с примером конфигурации
- [x] Настроить валидацию конфигурации с Pydantic Settings
- [x] Добавить проверку обязательных полей и типов данных
- [x] Реализовать детальные сообщения об ошибках

### Зависимости
- [x] Создать `pyproject.toml` с зависимостями
- [x] Добавить FastAPI, structlog, httpx, python-dotenv, Pydantic v2
- [x] Настроить управление пакетами через uv

## Развертывание

### Vercel конфигурация
- [x] Создать `vercel.json` для конфигурации Vercel
- [x] Настроить сборку Python приложения
- [x] Настроить маршрутизацию запросов
- [x] Подготовить переменные окружения для Vercel

## Поздняя стадия (опционально)

### Система тестирования
- [ ] Создать папку `tests/` с тестами
- [ ] Создать `tests/conftest.py` для pytest конфигурации
- [ ] Создать `tests/unit/test_services.py` для unit тестов
- [ ] Реализовать unit тесты для сервисов и утилит
- [ ] Реализовать integration тесты для API endpoints
- [ ] Настроить базовое покрытие критических компонентов

### Система бенчмаркинга
- [ ] Создать папку `benchmark/`
- [ ] Создать `benchmark/benchmark.py` - основной скрипт
- [ ] Создать `benchmark/test_cases.yaml` - набор тест-кейсов
- [ ] Создать папку `benchmark/results/` для результатов
- [ ] Реализовать запуск предопределенных тестовых кейсов
- [ ] Добавить отправку запросов с различными входными данными
- [ ] Реализовать отображение результатов каждого кейса
- [ ] Настроить сохранение результатов в файл (JSON/CSV)
- [ ] Добавить библиотеки requests и rich

## Документация

### API документация
- [x] Настроить автоматическую генерацию документации FastAPI
- [x] Добавить описания для всех endpoints
- [x] Создать примеры запросов и ответов
- [x] Настроить Swagger UI и ReDoc

### README
- [x] Создать `README.md` с описанием проекта
- [x] Добавить инструкции по установке и запуску
- [x] Описать конфигурацию и переменные окружения
- [x] Добавить примеры использования API
- [x] Описать процесс развертывания на Vercel

## Критерии готовности

### Основные требования
- [x] Все endpoints работают корректно
- [x] Простая webhook система функционирует
- [x] Система алертов для ошибок 400/500 настроена
- [x] Step схемы для внешних сервисов реализованы
- [x] Пример простого действия работает
- [x] Философия максимальной гибкости параметров реализована
- [x] Логирование настроено
- [x] Stateless архитектура работает корректно
- [x] Конфигурация через .env файлы
- [x] Документация API сгенерирована

### Поздняя стадия (опционально)
- [ ] Система тестирования настроена и работает
- [ ] Система бенчмаркинга реализована и работает корректно
- [x] Развертывание на Vercel работает
